//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JPath.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BuildXL.Execution.Analyzer.JPath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, WS=21, NOT=22, AND=23, OR=24, XOR=25, IFF=26, 
		GTE=27, LTE=28, GT=29, LT=30, EQ=31, NEQ=32, MATCH=33, NMATCH=34, MINUS=35, 
		PLUS=36, TIMES=37, DIV=38, MOD=39, CONCAT=40, UNION=41, DIFFERENCE=42, 
		INTERSECT=43, IntLit=44, StrLit=45, RegExLit=46, Id=47, VarId=48, EscID=49, 
		Opt=50;
	public const int
		RULE_intBinaryOp = 0, RULE_intUnaryOp = 1, RULE_boolBinaryOp = 2, RULE_logicBinaryOp = 3, 
		RULE_logicUnaryOp = 4, RULE_setBinaryOp = 5, RULE_anyBinaryOp = 6, RULE_prop = 7, 
		RULE_selector = 8, RULE_literal = 9, RULE_propVal = 10, RULE_objLit = 11, 
		RULE_expr = 12;
	public static readonly string[] ruleNames = {
		"intBinaryOp", "intUnaryOp", "boolBinaryOp", "logicBinaryOp", "logicUnaryOp", 
		"setBinaryOp", "anyBinaryOp", "prop", "selector", "literal", "propVal", 
		"objLit", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'{'", "','", "'}'", "'$'", "'_'", "'.'", "'['", "']'", "'..'", 
		"'#'", "'('", "')'", "'|'", "'|>'", "'|>>'", "'let'", "':='", "'in'", 
		"';'", null, "'not'", "'and'", "'or'", "'xor'", "'iff'", "'>='", "'<='", 
		"'>'", "'<'", "'='", "'!='", "'~'", "'!~'", "'-'", "'+'", "'*'", "'/'", 
		"'%'", "'++'", "'@+'", "'@-'", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "WS", "NOT", "AND", 
		"OR", "XOR", "IFF", "GTE", "LTE", "GT", "LT", "EQ", "NEQ", "MATCH", "NMATCH", 
		"MINUS", "PLUS", "TIMES", "DIV", "MOD", "CONCAT", "UNION", "DIFFERENCE", 
		"INTERSECT", "IntLit", "StrLit", "RegExLit", "Id", "VarId", "EscID", "Opt"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IntBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(JPathParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public ITerminalNode TIMES() { return GetToken(JPathParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(JPathParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(JPathParser.MOD, 0); }
		public IntBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntBinaryOpContext intBinaryOp() {
		IntBinaryOpContext _localctx = new IntBinaryOpContext(Context, State);
		EnterRule(_localctx, 0, RULE_intBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << PLUS) | (1L << TIMES) | (1L << DIV) | (1L << MOD))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntUnaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public IntUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntUnaryOpContext intUnaryOp() {
		IntUnaryOpContext _localctx = new IntUnaryOpContext(Context, State);
		EnterRule(_localctx, 2, RULE_intUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; _localctx.Token = Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode GTE() { return GetToken(JPathParser.GTE, 0); }
		public ITerminalNode GT() { return GetToken(JPathParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(JPathParser.LTE, 0); }
		public ITerminalNode LT() { return GetToken(JPathParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(JPathParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JPathParser.NEQ, 0); }
		public ITerminalNode MATCH() { return GetToken(JPathParser.MATCH, 0); }
		public ITerminalNode NMATCH() { return GetToken(JPathParser.NMATCH, 0); }
		public BoolBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolBinaryOpContext boolBinaryOp() {
		BoolBinaryOpContext _localctx = new BoolBinaryOpContext(Context, State);
		EnterRule(_localctx, 4, RULE_boolBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTE) | (1L << LTE) | (1L << GT) | (1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << MATCH) | (1L << NMATCH))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode AND() { return GetToken(JPathParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JPathParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(JPathParser.XOR, 0); }
		public ITerminalNode IFF() { return GetToken(JPathParser.IFF, 0); }
		public LogicBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicBinaryOpContext logicBinaryOp() {
		LogicBinaryOpContext _localctx = new LogicBinaryOpContext(Context, State);
		EnterRule(_localctx, 6, RULE_logicBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << IFF))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicUnaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode NOT() { return GetToken(JPathParser.NOT, 0); }
		public LogicUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicUnaryOpContext logicUnaryOp() {
		LogicUnaryOpContext _localctx = new LogicUnaryOpContext(Context, State);
		EnterRule(_localctx, 8, RULE_logicUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; _localctx.Token = Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(JPathParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public ITerminalNode CONCAT() { return GetToken(JPathParser.CONCAT, 0); }
		public ITerminalNode UNION() { return GetToken(JPathParser.UNION, 0); }
		public ITerminalNode DIFFERENCE() { return GetToken(JPathParser.DIFFERENCE, 0); }
		public ITerminalNode INTERSECT() { return GetToken(JPathParser.INTERSECT, 0); }
		public SetBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSetBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSetBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetBinaryOpContext setBinaryOp() {
		SetBinaryOpContext _localctx = new SetBinaryOpContext(Context, State);
		EnterRule(_localctx, 10, RULE_setBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << PLUS) | (1L << CONCAT) | (1L << UNION) | (1L << DIFFERENCE) | (1L << INTERSECT))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyBinaryOpContext : ParserRuleContext {
		public IntBinaryOpContext intBinaryOp() {
			return GetRuleContext<IntBinaryOpContext>(0);
		}
		public BoolBinaryOpContext boolBinaryOp() {
			return GetRuleContext<BoolBinaryOpContext>(0);
		}
		public LogicBinaryOpContext logicBinaryOp() {
			return GetRuleContext<LogicBinaryOpContext>(0);
		}
		public SetBinaryOpContext setBinaryOp() {
			return GetRuleContext<SetBinaryOpContext>(0);
		}
		public AnyBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterAnyBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitAnyBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyBinaryOpContext anyBinaryOp() {
		AnyBinaryOpContext _localctx = new AnyBinaryOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_anyBinaryOp);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; intBinaryOp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; boolBinaryOp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; logicBinaryOp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; setBinaryOp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
	 
		public PropContext() { }
		public virtual void CopyFrom(PropContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EscIdContext : PropContext {
		public IToken PropertyName;
		public ITerminalNode EscID() { return GetToken(JPathParser.EscID, 0); }
		public EscIdContext(PropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterEscId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitEscId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyIdContext : PropContext {
		public IToken PropertyName;
		public ITerminalNode Id() { return GetToken(JPathParser.Id, 0); }
		public PropertyIdContext(PropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterPropertyId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitPropertyId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 14, RULE_prop);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				_localctx = new PropertyIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; ((PropertyIdContext)_localctx).PropertyName = Match(Id);
				}
				break;
			case EscID:
				_localctx = new EscIdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; ((EscIdContext)_localctx).PropertyName = Match(EscID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdSelectorContext : SelectorContext {
		public PropContext Name;
		public PropContext prop() {
			return GetRuleContext<PropContext>(0);
		}
		public IdSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 16, RULE_selector);
		try {
			_localctx = new IdSelectorContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; ((IdSelectorContext)_localctx).Name = prop();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegExLitExprContext : LiteralContext {
		public IToken Value;
		public ITerminalNode RegExLit() { return GetToken(JPathParser.RegExLit, 0); }
		public RegExLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRegExLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRegExLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExprContext : LiteralContext {
		public IToken Value;
		public ITerminalNode IntLit() { return GetToken(JPathParser.IntLit, 0); }
		public IntLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrLitExprContext : LiteralContext {
		public IToken Value;
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public StrLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterStrLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitStrLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StrLit:
				_localctx = new StrLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; ((StrLitExprContext)_localctx).Value = Match(StrLit);
				}
				break;
			case RegExLit:
				_localctx = new RegExLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; ((RegExLitExprContext)_localctx).Value = Match(RegExLit);
				}
				break;
			case IntLit:
				_localctx = new IntLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; ((IntLitExprContext)_localctx).Value = Match(IntLit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropValContext : ParserRuleContext {
		public PropValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propVal; } }
	 
		public PropValContext() { }
		public virtual void CopyFrom(PropValContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyValueContext : PropValContext {
		public PropContext Name;
		public ExprContext Value;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PropContext prop() {
			return GetRuleContext<PropContext>(0);
		}
		public PropertyValueContext(PropValContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropValContext propVal() {
		PropValContext _localctx = new PropValContext(Context, State);
		EnterRule(_localctx, 20, RULE_propVal);
		try {
			_localctx = new PropertyValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 55; ((PropertyValueContext)_localctx).Name = prop();
				State = 56; Match(T__0);
				}
				break;
			}
			State = 60; ((PropertyValueContext)_localctx).Value = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjLitContext : ParserRuleContext {
		public ObjLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objLit; } }
	 
		public ObjLitContext() { }
		public virtual void CopyFrom(ObjLitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ObjLitPropsContext : ObjLitContext {
		public PropValContext _propVal;
		public IList<PropValContext> _Props = new List<PropValContext>();
		public PropValContext[] propVal() {
			return GetRuleContexts<PropValContext>();
		}
		public PropValContext propVal(int i) {
			return GetRuleContext<PropValContext>(i);
		}
		public ObjLitPropsContext(ObjLitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterObjLitProps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitObjLitProps(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjLitProps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjLitContext objLit() {
		ObjLitContext _localctx = new ObjLitContext(Context, State);
		EnterRule(_localctx, 22, RULE_objLit);
		int _la;
		try {
			_localctx = new ObjLitPropsContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(T__1);
			State = 63; ((ObjLitPropsContext)_localctx)._propVal = propVal();
			((ObjLitPropsContext)_localctx)._Props.Add(((ObjLitPropsContext)_localctx)._propVal);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 64; Match(T__2);
				State = 65; ((ObjLitPropsContext)_localctx)._propVal = propVal();
				((ObjLitPropsContext)_localctx)._Props.Add(((ObjLitPropsContext)_localctx)._propVal);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExprContext : ExprContext {
		public ExprContext Lhs;
		public ExprContext Sub;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MapExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterMapExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitMapExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncOptExprContext : ExprContext {
		public ExprContext Func;
		public IToken OptName;
		public LiteralContext OptValue;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Opt() { return GetToken(JPathParser.Opt, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FuncOptExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFuncOptExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFuncOptExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncOptExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CardinalityExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CardinalityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterCardinalityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitCardinalityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinalityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SaveToFileExprContext : ExprContext {
		public ExprContext Input;
		public IToken File;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public SaveToFileExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSaveToFileExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSaveToFileExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveToFileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetExprContext : ExprContext {
		public IToken Var;
		public ExprContext Val;
		public ExprContext Sub;
		public ITerminalNode VarId() { return GetToken(JPathParser.VarId, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LetExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppendToFileExprContext : ExprContext {
		public ExprContext Input;
		public IToken File;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public AppendToFileExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterAppendToFileExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitAppendToFileExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppendToFileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinExprContext : ExprContext {
		public ExprContext Lhs;
		public AnyBinaryOpContext Op;
		public ExprContext Rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AnyBinaryOpContext anyBinaryOp() {
			return GetRuleContext<AnyBinaryOpContext>(0);
		}
		public BinExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext Lhs;
		public ExprContext Begin;
		public ExprContext End;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public IToken Var;
		public ExprContext Val;
		public ITerminalNode VarId() { return GetToken(JPathParser.VarId, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExprContext : ExprContext {
		public SelectorContext Sub;
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public SelectorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSelectorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSelectorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExprContext : ExprContext {
		public ExprContext Lhs;
		public ExprContext Filter;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FilterExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RootExprContext : ExprContext {
		public RootExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjLitExprContext : ExprContext {
		public ObjLitContext Obj;
		public ObjLitContext objLit() {
			return GetRuleContext<ObjLitContext>(0);
		}
		public ObjLitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterObjLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitObjLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeExprContext : ExprContext {
		public ExprContext Input;
		public ExprContext Func;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PipeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterPipeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitPipeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExprContext : ExprContext {
		public IToken Var;
		public ITerminalNode VarId() { return GetToken(JPathParser.VarId, 0); }
		public VarExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterVarExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitVarExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		public LiteralContext Lit;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncAppExprParenContext : ExprContext {
		public ExprContext Func;
		public ExprContext _expr;
		public IList<ExprContext> _Args = new List<ExprContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FuncAppExprParenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFuncAppExprParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFuncAppExprParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAppExprParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExprContext : ExprContext {
		public ThisExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterThisExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitThisExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new RootExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 74; Match(T__4);
				}
				break;
			case 2:
				{
				_localctx = new ThisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75; Match(T__5);
				}
				break;
			case 3:
				{
				_localctx = new VarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76; ((VarExprContext)_localctx).Var = Match(VarId);
				}
				break;
			case 4:
				{
				_localctx = new SelectorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77; ((SelectorExprContext)_localctx).Sub = selector();
				}
				break;
			case 5:
				{
				_localctx = new ObjLitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; ((ObjLitExprContext)_localctx).Obj = objLit();
				}
				break;
			case 6:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; ((LiteralExprContext)_localctx).Lit = literal();
				}
				break;
			case 7:
				{
				_localctx = new CardinalityExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80; Match(T__10);
				State = 81; ((CardinalityExprContext)_localctx).Sub = expr(10);
				}
				break;
			case 8:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82; Match(T__11);
				State = 83; ((SubExprContext)_localctx).Sub = expr(0);
				State = 84; Match(T__12);
				}
				break;
			case 9:
				{
				_localctx = new LetExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86; Match(T__16);
				State = 87; ((LetExprContext)_localctx).Var = Match(VarId);
				State = 88; Match(T__17);
				State = 89; ((LetExprContext)_localctx).Val = expr(0);
				State = 90; Match(T__18);
				State = 92;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 91; ((LetExprContext)_localctx).Sub = expr(0);
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new AssignExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94; ((AssignExprContext)_localctx).Var = Match(VarId);
				State = 95; Match(T__17);
				State = 96; ((AssignExprContext)_localctx).Val = expr(0);
				State = 98;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 97; Match(T__19);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 147;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new MapExprContext(new ExprContext(_parentctx, _parentState));
						((MapExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 103; Match(T__6);
						State = 104; ((MapExprContext)_localctx).Sub = expr(14);
						}
						break;
					case 2:
						{
						_localctx = new PipeExprContext(new ExprContext(_parentctx, _parentState));
						((PipeExprContext)_localctx).Input = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 106; Match(T__13);
						State = 107; ((PipeExprContext)_localctx).Func = expr(8);
						}
						break;
					case 3:
						{
						_localctx = new BinExprContext(new ExprContext(_parentctx, _parentState));
						((BinExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 108;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 109; ((BinExprContext)_localctx).Op = anyBinaryOp();
						State = 110; ((BinExprContext)_localctx).Rhs = expr(5);
						}
						break;
					case 4:
						{
						_localctx = new FilterExprContext(new ExprContext(_parentctx, _parentState));
						((FilterExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 112;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 113; Match(T__7);
						State = 114; ((FilterExprContext)_localctx).Filter = expr(0);
						State = 115; Match(T__8);
						}
						break;
					case 5:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 117;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 118; Match(T__7);
						State = 119; ((RangeExprContext)_localctx).Begin = expr(0);
						State = 120; Match(T__9);
						State = 121; ((RangeExprContext)_localctx).End = expr(0);
						State = 122; Match(T__8);
						}
						break;
					case 6:
						{
						_localctx = new FuncAppExprParenContext(new ExprContext(_parentctx, _parentState));
						((FuncAppExprParenContext)_localctx).Func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 124;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 125; Match(T__11);
						State = 126; ((FuncAppExprParenContext)_localctx)._expr = expr(0);
						((FuncAppExprParenContext)_localctx)._Args.Add(((FuncAppExprParenContext)_localctx)._expr);
						State = 131;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__2) {
							{
							{
							State = 127; Match(T__2);
							State = 128; ((FuncAppExprParenContext)_localctx)._expr = expr(0);
							((FuncAppExprParenContext)_localctx)._Args.Add(((FuncAppExprParenContext)_localctx)._expr);
							}
							}
							State = 133;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 134; Match(T__12);
						}
						break;
					case 7:
						{
						_localctx = new FuncOptExprContext(new ExprContext(_parentctx, _parentState));
						((FuncOptExprContext)_localctx).Func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 136;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 137; ((FuncOptExprContext)_localctx).OptName = Match(Opt);
						State = 139;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
						case 1:
							{
							State = 138; ((FuncOptExprContext)_localctx).OptValue = literal();
							}
							break;
						}
						}
						break;
					case 8:
						{
						_localctx = new SaveToFileExprContext(new ExprContext(_parentctx, _parentState));
						((SaveToFileExprContext)_localctx).Input = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 141;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 142; Match(T__14);
						State = 143; ((SaveToFileExprContext)_localctx).File = Match(StrLit);
						}
						break;
					case 9:
						{
						_localctx = new AppendToFileExprContext(new ExprContext(_parentctx, _parentState));
						((AppendToFileExprContext)_localctx).Input = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 144;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 145; Match(T__15);
						State = 146; ((AppendToFileExprContext)_localctx).File = Match(StrLit);
						}
						break;
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x9B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '-', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x31', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x38', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '=', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x45', 
		'\n', '\r', '\f', '\r', '\xE', '\r', 'H', '\v', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'_', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x65', '\n', '\xE', '\x5', '\xE', 'g', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\x84', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\x87', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x8E', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\x96', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x99', 
		'\v', '\xE', '\x3', '\xE', '\x2', '\x3', '\x1A', '\xF', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x2', '\x6', '\x3', '\x2', '%', ')', '\x3', '\x2', '\x1D', '$', 
		'\x3', '\x2', '\x19', '\x1C', '\x4', '\x2', '%', '&', '*', '-', '\x2', 
		'\xAB', '\x2', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\n', '$', '\x3', '\x2', '\x2', '\x2', '\f', 
		'&', '\x3', '\x2', '\x2', '\x2', '\xE', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x30', '\x3', '\x2', '\x2', '\x2', '\x12', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x37', '\x3', '\x2', '\x2', '\x2', '\x16', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '@', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\t', '\x2', '\x2', 
		'\x2', '\x1D', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'%', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\t', '\x3', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\t', '\x4', '\x2', '\x2', '#', '\t', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\a', '\x18', '\x2', '\x2', '%', '\v', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\t', '\x5', '\x2', '\x2', '\'', '\r', '\x3', '\x2', 
		'\x2', '\x2', '(', '-', '\x5', '\x2', '\x2', '\x2', ')', '-', '\x5', '\x6', 
		'\x4', '\x2', '*', '-', '\x5', '\b', '\x5', '\x2', '+', '-', '\x5', '\f', 
		'\a', '\x2', ',', '(', '\x3', '\x2', '\x2', '\x2', ',', ')', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', 
		'\x2', '\x2', '-', '\xF', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\a', 
		'\x31', '\x2', '\x2', '/', '\x31', '\a', '\x33', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x11', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\x10', 
		'\t', '\x2', '\x33', '\x13', '\x3', '\x2', '\x2', '\x2', '\x34', '\x38', 
		'\a', '/', '\x2', '\x2', '\x35', '\x38', '\a', '\x30', '\x2', '\x2', '\x36', 
		'\x38', '\a', '.', '\x2', '\x2', '\x37', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x15', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x5', '\x10', '\t', '\x2', ':', ';', '\a', '\x3', '\x2', '\x2', 
		';', '=', '\x3', '\x2', '\x2', '\x2', '<', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\x5', '\x1A', '\xE', '\x2', '?', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '\x4', '\x2', '\x2', '\x41', '\x46', 
		'\x5', '\x16', '\f', '\x2', '\x42', '\x43', '\a', '\x5', '\x2', '\x2', 
		'\x43', '\x45', '\x5', '\x16', '\f', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\x6', '\x2', '\x2', 'J', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\b', '\xE', '\x1', '\x2', 'L', 'g', '\a', '\a', '\x2', 
		'\x2', 'M', 'g', '\a', '\b', '\x2', '\x2', 'N', 'g', '\a', '\x32', '\x2', 
		'\x2', 'O', 'g', '\x5', '\x12', '\n', '\x2', 'P', 'g', '\x5', '\x18', 
		'\r', '\x2', 'Q', 'g', '\x5', '\x14', '\v', '\x2', 'R', 'S', '\a', '\r', 
		'\x2', '\x2', 'S', 'g', '\x5', '\x1A', '\xE', '\f', 'T', 'U', '\a', '\xE', 
		'\x2', '\x2', 'U', 'V', '\x5', '\x1A', '\xE', '\x2', 'V', 'W', '\a', '\xF', 
		'\x2', '\x2', 'W', 'g', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x13', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\x32', '\x2', '\x2', 'Z', '[', '\a', '\x14', 
		'\x2', '\x2', '[', '\\', '\x5', '\x1A', '\xE', '\x2', '\\', '^', '\a', 
		'\x15', '\x2', '\x2', ']', '_', '\x5', '\x1A', '\xE', '\x2', '^', ']', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 
		'g', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\x32', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\x14', '\x2', '\x2', '\x62', '\x64', '\x5', '\x1A', 
		'\xE', '\x2', '\x63', '\x65', '\a', '\x16', '\x2', '\x2', '\x64', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'M', '\x3', '\x2', '\x2', '\x2', '\x66', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'O', '\x3', '\x2', '\x2', '\x2', '\x66', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'Q', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x66', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'X', '\x3', '\x2', '\x2', '\x2', '\x66', '`', '\x3', '\x2', '\x2', 
		'\x2', 'g', '\x97', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\f', '\xF', 
		'\x2', '\x2', 'i', 'j', '\a', '\t', '\x2', '\x2', 'j', '\x96', '\x5', 
		'\x1A', '\xE', '\x10', 'k', 'l', '\f', '\t', '\x2', '\x2', 'l', 'm', '\a', 
		'\x10', '\x2', '\x2', 'm', '\x96', '\x5', '\x1A', '\xE', '\n', 'n', 'o', 
		'\f', '\x6', '\x2', '\x2', 'o', 'p', '\x5', '\xE', '\b', '\x2', 'p', 'q', 
		'\x5', '\x1A', '\xE', '\a', 'q', '\x96', '\x3', '\x2', '\x2', '\x2', 'r', 
		's', '\f', '\xE', '\x2', '\x2', 's', 't', '\a', '\n', '\x2', '\x2', 't', 
		'u', '\x5', '\x1A', '\xE', '\x2', 'u', 'v', '\a', '\v', '\x2', '\x2', 
		'v', '\x96', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\f', '\r', '\x2', 
		'\x2', 'x', 'y', '\a', '\n', '\x2', '\x2', 'y', 'z', '\x5', '\x1A', '\xE', 
		'\x2', 'z', '{', '\a', '\f', '\x2', '\x2', '{', '|', '\x5', '\x1A', '\xE', 
		'\x2', '|', '}', '\a', '\v', '\x2', '\x2', '}', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\f', '\v', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\xE', '\x2', '\x2', '\x80', '\x85', '\x5', '\x1A', '\xE', '\x2', '\x81', 
		'\x82', '\a', '\x5', '\x2', '\x2', '\x82', '\x84', '\x5', '\x1A', '\xE', 
		'\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\xF', '\x2', '\x2', '\x89', '\x96', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\f', '\n', '\x2', '\x2', '\x8B', '\x8D', '\a', '\x34', '\x2', 
		'\x2', '\x8C', '\x8E', '\x5', '\x14', '\v', '\x2', '\x8D', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\f', '\b', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\x11', '\x2', '\x2', '\x91', '\x96', '\a', 
		'/', '\x2', '\x2', '\x92', '\x93', '\f', '\a', '\x2', '\x2', '\x93', '\x94', 
		'\a', '\x12', '\x2', '\x2', '\x94', '\x96', '\a', '/', '\x2', '\x2', '\x95', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x95', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x95', 'n', '\x3', '\x2', '\x2', '\x2', '\x95', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x95', 'w', '\x3', '\x2', '\x2', '\x2', '\x95', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\xE', ',', '\x30', '\x37', '<', '\x46', '^', '\x64', '\x66', '\x85', 
		'\x8D', '\x95', '\x97',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BuildXL.Execution.Analyzer.JPath
